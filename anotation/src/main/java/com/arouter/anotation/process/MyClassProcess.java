package com.arouter.anotation.process;


import com.arouter.anotation.FILED;
import com.arouter.anotation.METHOD;
import com.arouter.anotation.Parse;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.JavaFile;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;



@AutoService(Processor.class)
public class MyClassProcess extends AbstractProcessor {
    private Filer mFiler;
    private Messager mMessager;
    private Elements mElementUtils;
    private Map<String, ClassCreator> mProxyMap = new HashMap<>();

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        mFiler = processingEnv.getFiler();
        mMessager = processingEnv.getMessager();
        mElementUtils = processingEnv.getElementUtils();
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        HashSet<String> supportTypes = new LinkedHashSet<>();
        supportTypes.add(FILED.class.getCanonicalName());
        supportTypes.add(METHOD.class.getCanonicalName());
        supportTypes.add(Parse.class.getCanonicalName());
        return supportTypes;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        mMessager.printMessage(Diagnostic.Kind.NOTE, "processing...");
        mProxyMap.clear();
        //得到所有的注解
        Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(Parse.class);
        for (Element element : elements) {
            TypeElement classElement = (TypeElement) element;
            String fullClassName = classElement.getQualifiedName().toString();
            mMessager.printMessage(Diagnostic.Kind.NOTE, "fullClassName..." + fullClassName);
            //elements的信息保存到mProxyMap中
            ClassCreator proxy = mProxyMap.get(fullClassName);
            if (proxy == null) {
                proxy = new ClassCreator(mElementUtils, classElement, mMessager);
                mProxyMap.put(fullClassName, proxy);
            }
        }
        //通过javapoet生成
        for (String key : mProxyMap.keySet()) {
            ClassCreator proxyInfo = mProxyMap.get(key);
            JavaFile javaFile = JavaFile.builder(proxyInfo.getPackageName(), proxyInfo.generateProxy()).build();
            key = key.replace(".", "/");

            String projectDir = processingEnv.getOptions().get("projectDir");
            String moduleName = processingEnv.getOptions().get("moduleName");
            projectDir = projectDir.replace("\\", "/");
            String path = projectDir + "/src/main/java/";
            mMessager.printMessage(Diagnostic.Kind.NOTE, "path==" + path + "    projectDir=" + projectDir + "   moduleName=" + moduleName);
            File file = new File(path);
            try {
                //　生成文件
                javaFile.fileComment.toBuilder().add(" THIS CODE IS GENERATED BY JSBRIDGE ANOTATION LIB, DO NOT DELTE.");
                javaFile.writeTo(file);

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        mMessager.printMessage(Diagnostic.Kind.NOTE, "process finish ...");
        return true;
    }
}
